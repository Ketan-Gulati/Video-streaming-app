import mongoose from "mongoose";
import jwt from "jsonwebtoken"
import bcrypt from "bcrypt"

const userSchema = new mongoose.Schema({        //id is automatically generated by mongodb so no need to make its field
    userName : {
        type:String,
        required:true,
        unique:true,
        lowercase:true,
        index:true,             // to make the field searchable in optimized way
        trim:true        
    },
    password : {
        type:String,
        required:[true, "Password is required"],
    },
    email : {
        type:String,
        required:true,
        unique:true,
        lowercase:true,
        trim:true
    },
    fullName : {
        type:String,
        required:true,
        index:true,
        trim:true
    },
    avatar : {
        type:String,              // cloudinary url
        required:true              
    },
    coverImage : {
        type:String
    },
    watchHistory : [
        {
        type:mongoose.Schema.Types.ObjectId,
        ref:"Video"
        }
    ],
    refreshToken : {
        type:String
    }
},{timestamps:true})


//password hashing
userSchema.pre("save", async function(next){
    if(!this.isModified("password")) return next()
    this.password=await bcrypt.hash(this.password,10)
    next()
})

//verifying password and hashed password
userSchema.methods.isCorrectPassword = async function (password){
    return await bcrypt.compare(password,this.password)
}

//generating an access token
userSchema.methods.generateAccessToken = function(){    // async not needed bcz jwt is fast
    return jwt.sign(
        {
            _id : this._id,
            email : this.email,
            userName : this.userName,
            fullName : this.fullName
        },
        process.env.ACCESS_TOKEN_SECRET,
        {
            expiresIn : process.env.ACCESS_TOKEN_EXPIRY
        }
    )
}

//generating a refresh token
userSchema.methods.generateRefreshToken = function(){
    return jwt.sign(
        {
            _id : this._id
        },
        process.env.REFRESH_TOKEN_SECRET,
        {
            expiresIn : process.env.REFRESH_TOKEN_EXPIRY
        }
    )
}

export const User = mongoose.model("User",userSchema)